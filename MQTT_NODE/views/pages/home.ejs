<section>
   <div class="d-flex flex-row" style="gap: 10px">
      <select class="form-select w-25 mb-5" id="select-time-travle">
         <option selected value="NOW">Dữ liệu hiện tại</option>
         <option value="OLD">Dữ liệu cũ</option>
      </select>

      <div id="input-time-travle" style="display: none">
         <div class="input-group mb-3 w-50 h-25">
            <input type="number" class="form-control form-control-sm" value="0" />
            <span class="input-group-text">minutes</span>
         </div>
         <button class="btn btn-primary ms-3" style="height: 37.5px" onclick="getProductsTravel()">Search</button>
      </div>
   </div>

   <div class="product-list" id="product-list"></div>
</section>
<!-- Price Update Modal -->
<div class="modal fade" id="priceModal" tabindex="-1" aria-hidden="true">
   <div class="modal-dialog">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title" id="priceModalLabel">Update Price</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
         </div>
         <div class="modal-body">
            <form id="priceUpdateForm">
               <div class="mb-3">
                  <label for="name-update" class="form-label">Product Name</label>
                  <input type="text" class="form-control" id="name-update" readonly disabled />
               </div>
               <div class="mb-3">
                  <label for="code-update" class="form-label">Product Code</label>
                  <input type="text" class="form-control" id="code-update" readonly disabled />
               </div>
               <div class="mb-3">
                  <label for="price-update" class="form-label">New Price (đ)</label>
                  <input type="number" class="form-control" id="price-update" required />
               </div>
            </form>
         </div>
         <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            <button type="button" class="btn btn-primary" id="savePriceBtn">Save changes</button>
         </div>
      </div>
   </div>
</div>

<!-- history Modal -->
<div class="modal fade" id="historyModal" tabindex="-1">
   <div class="modal-dialog modal-lg">
      <div class="modal-content">
         <div class="modal-header">
            <h5 class="modal-title" id="historyModalLabel">History Price</h5>
         </div>
         <div class="modal-body">
            <div>
               <div>
                  <p>Product Name: <b id="name"></b></p>
               </div>
               <div class="mb-3">
                  <p>Product Code: <b id="code"></b></p>
               </div>
               <div class="mb-3">
                  <p>Current Price (đ): <b id="price"></b></p>
               </div>
            </div>
            <div>
               <table class="table">
                  <thead class="table-light">
                     <tr>
                        <th scope="col">#</th>
                        <th scope="col">Old Price</th>
                        <th scope="col">Action</th>
                        <th scope="col">Time</th>
                     </tr>
                  </thead>
                  <tbody id="history-list"></tbody>
               </table>
            </div>
         </div>
         <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
         </div>
      </div>
   </div>
</div>

<script>
   const getProducts = async (offset) => {
      const productContens = document.querySelector("#product-list");
      productContens.innerHTML = `   <div class="text-center">
                                        <div class="spinner-border" role="status">
                                          <span class="visually-hidden">Loading...</span>
                                        </div>
                                      </div>`;
      const isOld = document.getElementById("select-time-travle").value === "OLD";
      const response = await axios.post("http://localhost:3000/api/getProducts", { offset: offset });
      if (response.data.result) {
         productContens.innerHTML = "";
         console.log("response.data.data", response.data.data);
         const products = response.data.data;
         if (products?.length > 0) {
            for (const pro of products) {
               productContens.insertAdjacentHTML(
                  "beforeend",
                  `
                      <div class="product-item">
                        <div class="product-image">
                          <img src="${pro.IMAGE}" alt="${pro.NAME}">
                        </div>
                        <div class="product-info">
                          <h3 class="product-name">${pro.NAME}</h3>
                          <p class="product-code">Code:${pro.CODE}</p>
                          <p class="product-price">${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(pro.PRICE)}</p>
                          <div class="product-btn" style="display: ${isOld ? "none" : "block"}">
                            <button class="btn btn-success"  
                                    data-bs-toggle="modal" 
                                    data-bs-target="#priceModal"
                                    data-product-code="${pro.CODE}"
                                    data-product-name="${pro.NAME}"
                                    data-product-price="${pro.PRICE}">
                              Update Price
                            </button>  
                             <button class="btn btn-warning" 
                                    data-bs-toggle="modal" 
                                    data-bs-target="#historyModal"
                                    data-product-code="${pro.CODE}"
                                    data-product-name="${pro.NAME}"
                                    data-product-price="${pro.PRICE}">
                              View History
                            </button>  
                          </div>
                        </div>
                      </div>
                    `
               );
            }
         }
      } else {
         productContens.innerHTML = "";
         alert(response.data.message);
      }
   };
   const getHistoryProduct = async (code) => {
      const response = await axios.post("http://localhost:3000/api/getHistoryProduct", {
         code: code,
      });

      if (response.data.result) {
         return response.data.data;
      } else {
         return [];
      }
   };
   const getProductsTravel = () => {
      console.log(document.querySelector("#input-time-travle input").value);
      const offset = document.querySelector("#input-time-travle input").value;
      if (offset == 0) {
         alert("Time travel cannot  = 0");
      } else {
         getProducts(offset);
      }
   };
   const updatePrice = async (code, name, price) => {
      const response = await axios.post("http://localhost:3000/api/updatePrice", {
         code: code,
         name: name,
         price: price,
      });

      if (response.data.result) {
         window.location.reload();
      } else {
         throw new Error(response.data.message);
      }
   };
   document.addEventListener("DOMContentLoaded", async function () {
      // LẤY SẢN PHẨM TỪ API
      await getProducts(0);

      // ONCHANGE
      document.getElementById("select-time-travle").addEventListener("change", async function () {
         const selectedValue = this.value;

         if (selectedValue === "NOW") {
            document.querySelector("#input-time-travle input").value = 0;

            document.getElementById("input-time-travle").style.display = "none";

            // gọi API
            await getProducts(0);
         } else if (selectedValue === "OLD") {
            document.getElementById("input-time-travle").style.display = "inline-flex";
            document.querySelectorAll(".product-btn").forEach((button) => {
               button.style.display = "none";
            });
         }
      });

      // mở modal history
      const historyModal = document.getElementById("historyModal");
      historyModal.addEventListener("show.bs.modal", async function (event) {
         const button = event.relatedTarget;
         const code = button.getAttribute("data-product-code");
         const name = button.getAttribute("data-product-name");
         const price = button.getAttribute("data-product-price");

         //gọi history api
         const historyData = await getHistoryProduct(code);
         if (historyData.length > 0) {
            const historyContens = document.querySelector("#history-list");

            for (const [index, value] of historyData.entries()) {
               historyContens.insertAdjacentHTML(
                  "beforeend",
                  `  <tr>
                        <th scope="row">${index}</th>
                        <td style="color: #e53935"><b>${new Intl.NumberFormat("vi-VN", { style: "currency", currency: "VND" }).format(value.PRICE)}</b></td>
                        <td>${value.IS_UPDATE === true ? "UPDATE" : value.ACTION_TYPE}</td>
                        <td></td>
                     </tr>`
               );
            }
         }

         // set product cho modal
         document.getElementById("name").innerText = name;
         document.getElementById("code").innerText = code;
         document.getElementById("price").innerText = price;
      });
      historyModal.addEventListener("hide.bs.modal", function (event) {
         document.getElementById("history-list").innerHTML = "";
      });
      // mở modal update
      const priceModal = document.getElementById("priceModal");
      const savePriceBtn = document.getElementById("savePriceBtn");

      priceModal.addEventListener("show.bs.modal", function (event) {
         const button = event.relatedTarget;
         const code = button.getAttribute("data-product-code");
         const name = button.getAttribute("data-product-name");
         const price = button.getAttribute("data-product-price");

         // set product cho modal
         document.getElementById("name-update").value = name;
         document.getElementById("code-update").value = code;
         document.getElementById("price-update").value = price;
      });

      // khi click save trên modal update
      savePriceBtn.addEventListener("click", async function () {
         const price = document.getElementById("price-update").value;
         const code = document.getElementById("code-update").value;
         const name = document.getElementById("name-update").value;

         if (!price) {
            alert("Please enter a valid price");
            return;
         }

         // xác nhận
         const isConfirmed = confirm(`Are you sure you want to update ${name} (${code}) to ${price}đ?`);
         if (!isConfirmed) return;

         try {
            //  disabled và đổi text của button trong lúc gọi api
            savePriceBtn.disabled = true;
            savePriceBtn.textContent = "Updating...";

            // Gọi API
            await updatePrice(code, name, price);
         } catch (error) {
            console.error("Error updating price:", error);
         } finally {
            // đóng modal
            const modal = bootstrap.Modal.getInstance(priceModal);
            modal.hide();

            // reset disabled và text của button
            savePriceBtn.disabled = false;
            savePriceBtn.textContent = "Save changes";
         }
      });
   });
</script>
