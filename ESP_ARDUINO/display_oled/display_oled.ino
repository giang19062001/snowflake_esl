#include <WiFi.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <ArduinoJson.h>  

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define OLED_ADDR 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Th√¥ng tin WiFi
const char* ssid = "GiangNgo";
const char* password = "19062001";

// Th√¥ng tin MQTT Broker (n·∫øu d√πng local Mosquitto tr√™n Windows)
const char* mqttServer = "172.20.10.6"; // Thay b·∫±ng IP m√°y t√≠nh ch·∫°y Mosquitto
// Ho·∫∑c d√πng broker public:
// const char* mqttServer = "broker.hivemq.com";

const int mqttPort = 1883;
const char* mqttTopic = "PRO001"; // M√£ s·∫£n ph·∫©m c·ªßa ESP32 n√†y

WiFiClient espClient;
PubSubClient mqttClient(espClient);

void setup() {
    Serial.begin(115200);

     // Kh·ªüi t·∫°o I2C v·ªõi ch√¢n m·∫∑c ƒë·ªãnh cho ESP32-C3
   Wire.begin(6, 7); // SDA=GPIO6, SCL=GPIO7
  
  // Kh·ªüi t·∫°o OLED
  if(!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) {
    Serial.println(F("SSD1306 allocation failed"));
    while(1); // D·ª´ng ch∆∞∆°ng tr√¨nh n·∫øu kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c OLED
  }
  
    display.clearDisplay();
    display.setTextSize(1);
    display.setTextColor(WHITE);


    // K·∫øt n·ªëi WiFi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(500);
        Serial.print(".");
    }
    Serial.println("\nConnected to WiFi!");
    Serial.println(WiFi.localIP());  // Ph·∫£i c√πng subnet v·ªõi m√°y t√≠nh (v√≠ d·ª•: 172.20.10.x)


    delay(2000);

    // K·∫øt n·ªëi MQTT Broker
    mqttClient.setServer(mqttServer, mqttPort);
    mqttClient.setCallback(mqttCallback); // H√†m x·ª≠ l√Ω khi nh·∫≠n d·ªØ li·ªáu

    reconnectMQTT();


display.clearDisplay();
display.setCursor(0, 0);
display.println("OK.");
display.display();

}

void loop() {
    if (!mqttClient.connected()) {
        reconnectMQTT();
    }
    mqttClient.loop();
}

// H√†m k·∫øt n·ªëi l·∫°i MQTT n·∫øu b·ªã m·∫•t
void reconnectMQTT() {
    while (!mqttClient.connected()) {
        Serial.println("Connecting to MQTT...");
        if (mqttClient.connect("ESP32Client")) {
            Serial.println("‚úÖ Connected to MQTT");
            mqttClient.subscribe(mqttTopic);
        } else {
            Serial.print("‚ùå Failed, rc=");
            Serial.print(mqttClient.state());  // In m√£ l·ªói
            Serial.println(" Retry in 5s...");
            delay(5000);
        }
    }
}

// H√†m x·ª≠ l√Ω khi nh·∫≠n d·ªØ li·ªáu t·ª´ MQTT
void mqttCallback(char* topic, byte* payload, unsigned int length) {
    Serial.print("üì¢ Received message on topic: ");
    Serial.println(topic);

    // Chuy·ªÉn payload th√†nh String
    String message;
    for (int i = 0; i < length; i++) {
        message += (char)payload[i];
    }

    // Parse JSON (v√≠ d·ª•: {"name":"iPhone", "price":"1000"})
    DynamicJsonDocument doc(1024);
    deserializeJson(doc, message);
    String name = doc["name"];
    String price = doc["price"];
    Serial.println(name);
    Serial.println(price);

    // Hi·ªÉn th·ªã l√™n OLED
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0, 0);
    display.print("Code:");
    display.println(mqttTopic);
    
    display.setCursor(0, 20);
    display.print("Name: ");
    display.println(name);
    
    display.setCursor(0, 40);
    display.print("Price: ");
    display.println(price);
    
    display.display();

    Serial.println("Updated OLED display!");
}